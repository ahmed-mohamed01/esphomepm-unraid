Menu="Dashboard"
Type="xmenu"
Icon="bolt"
---
<?php
    require_once("/usr/local/emhttp/plugins/esphomepm/include/functions.php");
    $config = esphomepm_load_config();
    $N = isset($N) ? $N : 0; // Define $N if not already defined
    $sortnr = $N+2;
    $costs_unit = isset($config['COSTS_UNIT']) ? $config['COSTS_UNIT'] : "GBP";
?>
<style type="text/css">
    #db-box<?=$N?> {margin-top:0px;}
    
    /* Dashboard widget styling */
    .dash_esphomepm {
        background-color: #1c1c1c;
        border: 1px solid #2b2b2b;
        border-radius: 4px;
        margin-bottom: 10px;
    }
    
    .dash_esphomepm .value {
        font-weight: bold;
        color: #F57C00;
    }
    
    .dash_esphomepm .header {
        font-weight: bold;
    }
    
    .dash_esphomepm .grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-gap: 5px;
        padding: 5px 10px 10px 10px;
    }
    
    .dash_esphomepm .grid-item {
        padding: 5px;
    }
    
    .dash_esphomepm .title-row {
        background-color: #2b2b2b;
        padding: 5px;
        border-radius: 4px 4px 0 0;
    }
    
    .dash_esphomepm .data-row {
        padding: 0;
    }
    
    .dash_esphomepm .fa-bolt {
        color: #F57C00;
    }
</style>
<table id='db-box<?=$N?>' class='dash_esphomepm dashboard box<?=$N?>'>
    <thead sort='<?=$sortnr?>'>
        <tr class='hidden'>
            <td></td>
            <td colspan='3'></td>
            <td></td>
        </tr>
    </thead>
    <tbody sort='<?=$sortnr?>' class='sortable'>
        <tr class='title-row'>
            <td></td>
            <td colspan='3' class='next'>
                <i class='fa fa-bolt'></i>
                <span class='header'>_(ESPHome Power Monitor)_</span>
                <a href='/Settings/ESPHomePMSettings' title="_(Go to ESPHome Power Monitor settings)_"><i class='fa fa-fw fa-cog chevron'></i></a>
            </td>
            <td></td>
        </tr>
        <tr class='data-row'>
            <td></td>
            <td colspan='3'>
                <div class='grid-container'>
                    <div class='grid-item'>
                        <div>_(Current Power)_: <span class='value esphomepm-current-power'>0</span> W</div>
                        <div>_(Average Daily Power)_: <span class='value esphomepm-avg-power'>0</span> W</div>
                    </div>
                    <div class='grid-item'>
                        <div>_(Daily Power)_: <span class='value esphomepm-energy-today'>0.00</span> kWh</div>
                        <div>_(Monthly Power)_: <span class='value esphomepm-energy-month'>0.00</span> kWh</div>
                        <div>_(Total Power)_: <span class='value esphomepm-energy-total'>0.00</span> kWh</div>
                    </div>
                    <div class='grid-item'>
                        <div>_(Daily Cost)_: <span class='value esphomepm-costs_today'>0.00</span> <?=$costs_unit?></div>
                        <div>_(Monthly Cost)_: <span class='value esphomepm-costs_month'>0.00</span> <?=$costs_unit?></div>
                        <div>_(Total Cost)_: <span class='value esphomepm-costs_total'>0.00</span> <?=$costs_unit?></div>
                    </div>
                </div>
            </td>
            <td></td>
        </tr>
    </tbody>
</table>
<script>
// Update ESPHome Power Monitor dashboard widget
function esphomepm_status() {
    $.getJSON("/plugins/esphomepm/status.php", function(data) {
        if (!data) return;
        
        // Current power
        updateValue('.esphomepm-current-power', data.power, 2);
        
        // Calculate average daily power if possible
        if (data.today_energy !== undefined) {
            // Get hours passed in the day
            const now = new Date();
            const hoursPassed = now.getHours() + (now.getMinutes() / 60);
            if (hoursPassed > 0) {
                // Calculate average power in watts (kWh -> W conversion)
                const avgPower = (data.today_energy * 1000) / hoursPassed;
                updateValue('.esphomepm-avg-power', avgPower, 0);
            } else {
                updateValue('.esphomepm-avg-power', 0, 0);
            }
        } else {
            updateValue('.esphomepm-avg-power', 0, 0);
        }
        
        // Energy values
        updateValue('.esphomepm-energy-today', data.today_energy, 3);
        updateValue('.esphomepm-energy-month', data.current_month_energy_total, 3);
        updateValue('.esphomepm-energy-total', data.overall_total_energy, 3);
        
        // Cost values
        updateValue('.esphomepm-costs_today', data.daily_cost, 2);
        updateValue('.esphomepm-costs_month', data.current_month_cost_total, 2);
        updateValue('.esphomepm-costs_total', data.overall_total_cost, 2);
    });
}

// Helper function to update values with proper formatting
function updateValue(selector, value, decimals) {
    if (value !== undefined) {
        $(selector).html(parseFloat(value).toFixed(decimals));
    } else {
        $(selector).html('0.00');
    }
}

$(document).ready(function() {
    // Initial status update
    esphomepm_status();
    
    // Set up refresh interval (10 seconds)
    setInterval(esphomepm_status, 10000);
});
</script>