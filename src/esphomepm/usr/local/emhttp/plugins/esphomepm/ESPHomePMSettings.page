Menu="Utilities"
Icon="esphomepm.png"
Title="ESPHome Power Monitor"
---
<?php
require_once("/usr/local/emhttp/plugins/esphomepm/data-handler.php");
$config = load_plugin_config();
$esphomepm_device_ip = isset($config['DEVICE_IP']) ? $config['DEVICE_IP'] : "";
$esphomepm_device_name = isset($config['DEVICE_NAME']) ? $config['DEVICE_NAME'] : "Unraid Server PM";
$esphomepm_costs_price = isset($config['COSTS_PRICE']) ? $config['COSTS_PRICE'] : "0.27";
$esphomepm_costs_unit = isset($config['COSTS_UNIT']) ? $config['COSTS_UNIT'] : "GBP";

// Determine which tab to show by default
$showMonitorTab = !empty($esphomepm_device_ip);
?>

<style>
    .value-display {
        transition: all 0.3s ease;
    }
    .value-updated {
        filter: brightness(1.5); /* Simple brightness increase that works with any theme */
    }
    .monthly-costs-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }
    .monthly-costs-table th, .monthly-costs-table td {
        padding: 8px;
        text-align: left;
    }
    /* Use Unraid's native styling for tables */
    dl {
        margin-bottom: 20px;
    }
    dt {
        font-weight: bold;
        margin-bottom: 5px;
    }
    dd {
        margin-bottom: 10px;
        margin-left: 15px;
    }
    /* Graph styling */
    #powerGraph {
        width: 100%;
        height: 250px;
        margin-top: 20px;
        margin-bottom: 20px;
    }
</style>

<!-- Settings Form -->
<form markdown="1" method="POST" action="/update.php" target="progressFrame" id="esphomepmSettingsForm">
<input type="hidden" name="#file" value="esphomepm/esphomepm.cfg" />

Device Name:
: <input id="DEVICE_NAME" type="text" class="stopped" name="DEVICE_NAME" maxlength="50" value="<?=$esphomepm_device_name;?>" title="" placeholder="ESPHome Device Name" >  

Device IP:
: <input id="DEVICE_IP" type="text" class="stopped" name="DEVICE_IP" maxlength="15" value="<?=$esphomepm_device_ip;?>" title="" placeholder="192.168.1.x" >  

Price per kWh for cost calculation:
: <input id="COSTS_PRICE" type="text" class="stopped" name="COSTS_PRICE" maxlength="10" value="<?=$esphomepm_costs_price;?>" title="" placeholder="0.00" >  

Unit for cost calculation:
: <input id="COSTS_UNIT" type="text" class="stopped" name="COSTS_UNIT" maxlength="10" value="<?=$esphomepm_costs_unit;?>" title="" placeholder="" >  

<input id="DEFAULT" class="stopped" type="button" value="Default" onClick="resetDATA(this.form)">
: <input type="button" value="Apply" id="APPLY" onClick="document.getElementById('esphomepmSettingsForm').submit()"><input type="button" value="Done" onClick="window.location.href='/Main'">
</form>

<!-- Add a feedback area -->
<div id="applyFeedback" style="margin-top: 10px; margin-bottom: 20px; font-weight: bold;"></div>

<!-- Monitoring Section -->
<?php if (!empty($esphomepm_device_ip)): ?>
<div id="deviceStatus">
        <h3>Power Monitoring</h3>
        <div id="sensorValues">
            <h4>Current Readings</h4>
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
                <div>
                    <p>Current Power: <span id="currentPower" class="value-display">--</span> W</p>
                    <p>Daily Energy: <span id="dailyEnergy" class="value-display">--</span> kWh</p>
                </div>
                <div>
                    <p>Daily Cost: <span id="dailyCost" class="value-display">--</span> <span id="costUnitDisplay">--</span></p>
                    <p>Monthly Cost: <span id="monthlyCost" class="value-display">--</span> <span id="costUnitDisplayMonthly">--</span></p>
                </div>
            </div>
            
            <h4 style="margin-top: 20px;">Power Usage Graph (Last 60s)</h4>
            <div id="powerGraphContainer" style="margin-top: 10px; height: 250px;">
                <canvas id="powerGraph"></canvas>
            </div>
            
            <div id="monthlyCosts">
            <h3>Monthly Costs</h3>
            <div class="summary-info">
                <dl>
                    <dt>Monitoring Since:</dt>
                    <dd id="monitoringSince">--</dd>
                </dl>
                <dl>
                    <dt>Overall Total Energy:</dt>
                    <dd id="overallTotalEnergy">-- kWh</dd>
                </dl>
                <dl>
                    <dt>Overall Total Cost:</dt>
                    <dd id="overallTotalCost">-- <?=$esphomepm_costs_unit;?></dd>
                </dl>
            </div>
            <div class="table-responsive">
                <table class="monthly-costs-table table table-striped">
                    <thead>
                        <tr>
                            <th>Month</th>
                            <th>Energy (kWh)</th>
                            <th>Cost (<?=$esphomepm_costs_unit;?>)</th>
                        </tr>
                    </thead>
                    <tbody id="monthlyDataTable">
                        <!-- Monthly data will be inserted here -->
                    </tbody>
                </table>
            </div>
            </div>
        </div>
    </div>
</div>
<?php else: ?>
<div class="notice">Please configure your ESPHome device IP address and click Apply to start monitoring.</div>
<?php endif; ?>



<!-- Include Chart.js from CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>

<script type="text/javascript">
// Global variables
let powerChart = null;
let refreshInterval = null;
let graphRefreshInterval = null;
const graphDataPoints = 60; // Display last 60 seconds of data
const powerHistory = [];
const timeHistory = [];

// Define key functions first to ensure they're available when called
function resetDATA(form) {
    form.DEVICE_IP.value = "";
    form.DEVICE_NAME.value = "Unraid Server PM"; // Default name
    form.COSTS_PRICE.value = "0.27";
    form.COSTS_UNIT.value = "GBP";
}

async function applySettings(form) {
    const feedbackElement = document.getElementById('applyFeedback');
    const deviceIP = form.DEVICE_IP.value.trim();
    
    // Basic IP validation
    if (deviceIP && !/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(deviceIP)) {
        feedbackElement.textContent = 'Invalid IP address format';
        feedbackElement.style.color = 'red';
        return;
    }
    
    feedbackElement.textContent = 'Saving settings...';
    feedbackElement.style.color = 'orange';
    
    // Submit the form
    form.submit();
    
    // Wait for settings to be saved
    setTimeout(async () => {
        feedbackElement.textContent = 'Settings saved. Checking device connectivity...';
        
        if (deviceIP) {
            try {
                // Try to fetch data from status.php to validate the device is reachable
                const timestamp = new Date().getTime();
                const response = await fetch(`/plugins/esphomepm/status.php?t=${timestamp}`);
                const data = await response.json();
                
                if (data.error && data.error.includes('cURL error')) {
                    feedbackElement.textContent = 'Warning: Device may not be reachable. Settings saved.';
                    feedbackElement.style.color = 'orange';
                } else {
                    feedbackElement.textContent = 'Settings saved successfully!';
                    feedbackElement.style.color = 'green';
                }
            } catch (error) {
                console.error('Error checking device:', error);
                feedbackElement.textContent = 'Settings saved, but could not verify device connection.';
                feedbackElement.style.color = 'orange';
            }
        } else {
            feedbackElement.textContent = 'Settings saved successfully!';
            feedbackElement.style.color = 'green';
        }
        
        // Reload the page to show monitoring section
        setTimeout(() => {
            window.location.reload();
        }, 2000);
    }, 1000);
}

function done() {
    window.location.href = '/Main';
}

// Utility to update and flash UI elements
function updateValue(elementId, value, unit = '', flash = true) {
    const element = document.getElementById(elementId);
    if (element) {
        const displayValue = (value === null || value === undefined || isNaN(parseFloat(value))) ? '--' : value;
        element.textContent = `${displayValue}${unit ? ' ' + unit : ''}`;
        if (flash && displayValue !== '--') {
            element.classList.add('value-updated');
            setTimeout(() => element.classList.remove('value-updated'), 300);
        }
    }
}

document.addEventListener('DOMContentLoaded', function() {
    // Native Unraid tabs are handled automatically by CSS

    // Settings form handling
    const applyButton = document.getElementById('APPLY');
    const settingsForm = document.getElementById('esphomepmSettingsForm');
    const feedbackElement = document.getElementById('applyFeedback');

    // Add event listener for Apply button
    if (applyButton && settingsForm) {
        applyButton.addEventListener('click', function() {
            // Basic IP validation
            const deviceIP = settingsForm.DEVICE_IP.value.trim();
            if (deviceIP && !/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/.test(deviceIP)) {
                feedbackElement.textContent = 'Invalid IP address format';
                feedbackElement.style.color = 'red';
                return;
            }
            
            feedbackElement.textContent = 'Saving settings...';
            feedbackElement.style.color = 'orange';
            
            // Submit the form
            settingsForm.submit();
            
            // Wait for settings to be saved
            setTimeout(function() {
                feedbackElement.textContent = 'Settings saved successfully!';
                feedbackElement.style.color = 'green';
                
                // Reload the page to show monitoring section
                setTimeout(function() {
                    window.location.reload();
                }, 2000);
            }, 1000);
        });
    }

    initializePowerGraph();
    setupRefreshIntervals();
});

function setupRefreshIntervals() {
    if (refreshInterval) clearInterval(refreshInterval);
    if (graphRefreshInterval) clearInterval(graphRefreshInterval);
    
    updateDeviceStatus(); 
    refreshInterval = setInterval(updateDeviceStatus, 2000); // Hardcoded to 2 seconds

    fetchGraphDataPoint(); 
    graphRefreshInterval = setInterval(fetchGraphDataPoint, 1000); // Graph updates every 1 second
}

async function updateDeviceStatus() {
    const deviceIP = document.getElementById('DEVICE_IP').value;
    const deviceStatusDiv = document.getElementById('deviceStatus');

    if (!deviceIP || !deviceStatusDiv) {
        return;
    }

    try {
        const timestamp = new Date().getTime();
        const response = await fetch(`/plugins/esphomepm/status.php?t=${timestamp}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();

        if (data.error) {
            console.error('Error from status.php:', data.error);
            updateValue('dailyEnergy', data.error, '', false);
            updateValue('currentPower', 'Error', '', false);
            return;
        }
        
        // Update current readings
        updateValue('currentPower', parseFloat(data.power).toFixed(2), '');
        updateValue('dailyEnergy', parseFloat(data.today_energy).toFixed(3), '');
        
        const costUnit = data.costs_unit || '';
        document.getElementById('costUnitDisplay').textContent = costUnit;
        document.getElementById('costUnitDisplayMonthly').textContent = costUnit;
        document.getElementById('costUnitDisplayTotal').textContent = costUnit;
        document.getElementById('tableUnitDisplay').textContent = costUnit;

        updateValue('dailyCost', parseFloat(data.daily_cost).toFixed(2));
        updateValue('monthlyCost', parseFloat(data.current_month_cost_total).toFixed(2));
        
        // Update historical data
        // Log the entire response data for debugging
        console.log('Full response data:', data);
        
        // Create a structured historical data object from the response
        const historicalData = {
            months: data.historical_months || {},
            monitoring_since: data.monitoring_start_date || '--',
            overall_total_energy: data.overall_total_energy || '--',
            overall_total_cost: data.overall_total_cost || '--'
        };
        
        const monthlyData = historicalData.months;
        const monitoringSince = historicalData.monitoring_since;
        const overallTotalEnergy = historicalData.overall_total_energy;
        const overallTotalCost = historicalData.overall_total_cost;
            
            document.getElementById('monitoringSince').textContent = monitoringSince;
            document.getElementById('overallTotalEnergy').textContent = `${overallTotalEnergy} kWh`;
            document.getElementById('overallTotalCost').textContent = `${overallTotalCost} ${data.costs_unit}`;
            
            const monthlyDataTable = document.getElementById('monthlyDataTable');
            monthlyDataTable.innerHTML = '';
            
            // Sort months in descending order (most recent first)
            const sortedMonths = Object.keys(monthlyData).sort().reverse();
            console.log('Sorted months:', sortedMonths);
            
            // Add current month to the table if it's not already in the historical data
            if (data.current_month_energy_total > 0 || data.current_month_cost_total > 0) {
                const currentMonthYear = new Date().toISOString().slice(0, 7); // YYYY-MM format
                if (!monthlyData[currentMonthYear]) {
                    monthlyData[currentMonthYear] = {
                        energy: data.current_month_energy_total,
                        cost: data.current_month_cost_total
                    };
                    if (!sortedMonths.includes(currentMonthYear)) {
                        sortedMonths.unshift(currentMonthYear);
                    }
                }
            }
            
            if (sortedMonths.length === 0) {
                const row = document.createElement('tr');
                const cell = document.createElement('td');
                cell.setAttribute('colspan', '3');
                cell.textContent = 'No monthly data available yet';
                cell.style.textAlign = 'center';
                row.appendChild(cell);
                monthlyDataTable.appendChild(row);
            } else {
                sortedMonths.forEach(month => {
                    const monthData = monthlyData[month] || {};
                    const row = document.createElement('tr');
                    const monthCell = document.createElement('td');
                    const energyCell = document.createElement('td');
                    const costCell = document.createElement('td');
                    
                    // Format month for display (YYYY-MM to Month YYYY)
                    try {
                        const [year, monthNum] = month.split('-');
                        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                        const monthName = monthNames[parseInt(monthNum) - 1];
                        monthCell.textContent = `${monthName} ${year}`;
                    } catch (e) {
                        monthCell.textContent = month;
                    }
                    
                    // For historical months, the data structure is different than for current month
                    const energyValue = monthData.energy_kwh !== undefined ? monthData.energy_kwh : (monthData.energy || 0);
                    energyCell.textContent = `${parseFloat(energyValue).toFixed(3)} kWh`;
                    
                    const costValue = monthData.cost || 0;
                    costCell.textContent = `${parseFloat(costValue).toFixed(2)} ${data.costs_unit}`;
                    
                    row.appendChild(monthCell);
                    row.appendChild(energyCell);
                    row.appendChild(costCell);
                    monthlyDataTable.appendChild(row);
                });
            }
            
            // Log the data to help with debugging
            console.log('Historical data:', data.historical_data);
        } else {
            console.log('No historical data available');
        }
            
        // Log data for debugging
        console.log('Historical data:', data.historical_months);
        console.log('Current month data:', data.current_month_energy_total, data.current_month_cost_total);

    } catch (error) {
        console.error('Failed to fetch device status:', error);
        updateValue('currentPower', 'Error', '', false);
        updateValue('dailyEnergy', 'Connection Error', '', false);
    }
}

async function fetchGraphDataPoint() {
    const deviceIP = document.getElementById('DEVICE_IP').value;
    if (!deviceIP) return;

    try {
        const timestamp = new Date().getTime();
        const response = await fetch(`/plugins/esphomepm/status.php?graph_point=true&t=${timestamp}`);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        
        const data = await response.json();
        if (data && typeof data.power !== 'undefined' && data.power !== null && !isNaN(parseFloat(data.power))) {
            updatePowerGraph(parseFloat(data.power));
        } else if (data.error) {
            console.warn("Graph data point error:", data.error); // Log error but don't break graph
        }
    } catch (error) {
        console.error('Failed to fetch graph data point:', error);
    }
}

function initializePowerGraph() {
    const ctx = document.getElementById('powerGraph').getContext('2d');
    if (powerChart) {
        powerChart.destroy();
    }
    powerChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [], 
            datasets: [{
                label: 'Current Power (W)',
                data: [],  
                borderColor: '#F57C00', 
                backgroundColor: 'rgba(245, 124, 0, 0.2)', 
                borderWidth: 1,
                tension: 0.4, 
                pointRadius: 0, 
                pointHitRadius: 10
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: false, // Disable all animations for performance
            scales: {
                x: {
                    type: 'category',
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 10, 
                        maxRotation: 0,
                        minRotation: 0
                    }
                },
                y: {
                    beginAtZero: true,
                    suggestedMax: 50 
                }
            },
            plugins: {
                legend: { display: false },
                tooltip: {
                    enabled: true,
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.parsed.y !== null) {
                                label += parseFloat(context.parsed.y).toFixed(2) + ' W';
                            }
                            return label;
                        }
                    }
                }
            }
        }
    });
    // Pre-fill labels for 60 points to avoid layout shifts
    for (let i = 0; i < graphDataPoints; i++) {
        timeHistory.push('');
        powerHistory.push(null); // Use null for gaps in Chart.js
    }
    powerChart.data.labels = [...timeHistory];
    powerChart.data.datasets[0].data = [...powerHistory];
    powerChart.update('none');
}

function updatePowerGraph(power) {
    if (!powerChart) return;

    const now = new Date();
    const timeLabel = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });

    powerHistory.push(power);
    timeHistory.push(timeLabel);

    if (powerHistory.length > graphDataPoints) {
        powerHistory.shift();
        timeHistory.shift();
    }

    powerChart.data.labels = [...timeHistory];
    powerChart.data.datasets[0].data = [...powerHistory];
    
    const maxPower = Math.max(...powerHistory.filter(p => p !== null), 0);
    if (maxPower > 0) {
        powerChart.options.scales.y.suggestedMax = Math.ceil(maxPower / 10) * 10 + 20; 
    } else {
        powerChart.options.scales.y.suggestedMax = 50; 
    }

    powerChart.update('none'); 
}

</script>
