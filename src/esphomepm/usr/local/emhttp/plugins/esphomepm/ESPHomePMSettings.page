Menu="Utilities"
Title="ESPHome Power Monitor"
Icon="bolt"
---
<?php
// Include common functions
require_once("/usr/local/emhttp/plugins/esphomepm/include/functions.php");

// Load configuration
$config = esphomepm_load_config();

// Get device settings
$esphomepm_device_name = isset($config['DEVICE_NAME']) ? $config['DEVICE_NAME'] : "Unraid Server PM";
$esphomepm_device_ip = isset($config['DEVICE_IP']) ? $config['DEVICE_IP'] : "";
$esphomepm_costs_price = isset($config['COSTS_PRICE']) ? $config['COSTS_PRICE'] : "0.27";
$esphomepm_costs_unit = isset($config['COSTS_UNIT']) ? $config['COSTS_UNIT'] : "GBP";

// Determine if we should show the monitoring tab
$showMonitorTab = !empty($esphomepm_device_ip);

// Get current tab
$tab = isset($_GET['tab']) ? $_GET['tab'] : 'settings';
if (!in_array($tab, ['settings', 'monitoring', 'history'])) {
    $tab = 'settings';
}

// If monitoring tab is not available, redirect to settings
if (($tab == 'monitoring' || $tab == 'history') && !$showMonitorTab) {
    $tab = 'settings';
}
?>

<style>
/* Simple styling for Unraid compatibility */
.highlight-value {
    font-weight: bold;
    color: #F57C00;
}
</style>

<?if(function_exists('plugin_update_available') && $version = plugin_update_available('esphomepm')):?>
<div id="title" class="nocontrol">_(ESPHome Power Monitor)_ &nbsp;<?=$version?></div>
<?endif;?>

<form markdown="1" method="GET" action="/Settings/ESPHomePMSettings">
<div id="title">
  <span class="left">
    <input type="button" value="_(Settings)_" onclick="location='?tab=settings'" <?=($tab == 'settings') ? 'class="active"' : ''?>>
    <?php if ($showMonitorTab): ?>
    <input type="button" value="_(Monitoring)_" onclick="location='?tab=monitoring'" <?=($tab == 'monitoring') ? 'class="active"' : ''?>>
    <input type="button" value="_(History)_" onclick="location='?tab=history'" <?=($tab == 'history') ? 'class="active"' : ''?>>
    <?php endif; ?>
  </span>
</div>
</form>

<div class="clear"></div>

<?php if ($tab == 'settings'): ?>
<!-- Settings Tab Content -->
<form markdown="1" method="POST" action="/update.php" target="progressFrame">
  <input type="hidden" name="#file" value="esphomepm/esphomepm.cfg">
  
  <table class="settings">
    <tr>
      <td>Device Name:</td>
      <td><input type="text" name="DEVICE_NAME" value="<?=$esphomepm_device_name?>" placeholder="ESPHome Device Name"></td>
    </tr>
    <tr>
      <td>Device IP:</td>
      <td><input type="text" name="DEVICE_IP" value="<?=$esphomepm_device_ip?>" placeholder="192.168.1.x"></td>
    </tr>
    <tr>
      <td>Price per kWh:</td>
      <td><input type="text" name="COSTS_PRICE" value="<?=$esphomepm_costs_price?>" placeholder="0.00"></td>
    </tr>
    <tr>
      <td>Currency Unit:</td>
      <td><input type="text" name="COSTS_UNIT" value="<?=$esphomepm_costs_unit?>" placeholder="GBP"></td>
    </tr>
  </table>
  
  <div style="text-align: center; margin-top: 20px;">
    <input type="submit" value="Apply">
    <button type="button" onclick="done()">Done</button>
  </div>
</form>

<?php if (empty($esphomepm_device_ip)): ?>
<div style="background-color: rgba(0, 144, 202, 0.1); border-left: 4px solid #0090CA; padding: 15px; margin: 20px 0; color: #ccc;">
  <i class="fa fa-info-circle"></i> Please configure your ESPHome device IP address and click Apply to start monitoring.
</div>
<?php endif; ?>

<?php elseif ($tab == 'monitoring' && $showMonitorTab): ?>
<!-- Monitoring Tab Content -->
<div style="display: grid; grid-template-columns: 25% 25% 25% 25%; margin-bottom: 20px;">
  <div>
    <div>Current Power:</div>
    <div><span id="currentPower" class="highlight-value">--</span> W</div>
  </div>
  <div>
    <div>Daily Energy:</div>
    <div><span id="dailyEnergy">--</span> kWh</div>
  </div>
  <div>
    <div>Daily Cost:</div>
    <div><span id="dailyCost" class="highlight-value">--</span> <span id="costUnit"><?=$esphomepm_costs_unit?></span></div>
  </div>
  <div>
    <div>Monthly Cost (est.):</div>
    <div><span id="monthlyCost" class="highlight-value">--</span> <span id="costUnitMonthly"><?=$esphomepm_costs_unit?></span></div>
  </div>
</div>

<div style="margin-top: 20px;">
  <h4>Power Graph</h4>
  <div id="powerGraphContainer" style="height: 300px; width: 100%; position: relative;">
    <canvas id="powerGraph"></canvas>
  </div>
</div>

<!-- Include Chart.js library -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>

<?php elseif ($tab == 'history' && $showMonitorTab): ?>
<!-- History Tab Content -->
<h4>Historical Data</h4>
<div style="overflow-x: auto;">
  <table class="tablesorter" style="width: 100%;">
    <thead>
      <tr>
        <th style="width: 33%;">Month</th>
        <th style="width: 33%;">Energy (kWh)</th>
        <th style="width: 33%;">Cost (<?=$esphomepm_costs_unit?>)</th>
      </tr>
    </thead>
    <tbody id="monthlyHistory">
      <tr>
        <td colspan="3">Loading historical data...</td>
      </tr>
    </tbody>
  </table>
</div>

<h4>Total Statistics</h4>
<div style="display: grid; grid-template-columns: 50% 50%; margin-top: 20px;">
  <div>
    <div>Total Energy:</div>
    <div><span id="totalEnergy" class="highlight-value">--</span> kWh</div>
  </div>
  <div>
    <div>Total Cost:</div>
    <div><span id="totalCost" class="highlight-value">--</span> <?=$esphomepm_costs_unit?></div>
  </div>
  <div style="grid-column: span 2; margin-top: 10px;">
    <div>Monitoring Since:</div>
    <div><span id="monitoringSince">--</span></div>
  </div>
</div>

<?php endif; ?>

<script>
// Basic functions to update data
function updateDeviceStatus() {
  const deviceIP = '<?=$esphomepm_device_ip?>';
  if (!deviceIP) return;
  
  fetch('/plugins/esphomepm/status.php')
    .then(response => response.json())
    .then(data => {
      if (data.error) {
        console.error('Error:', data.error);
        return;
      }
      
      // Update current readings
      document.getElementById('currentPower').textContent = data.power;
      document.getElementById('dailyEnergy').textContent = data.today_energy.toFixed(2);
      document.getElementById('dailyCost').textContent = data.daily_cost.toFixed(2);
      document.getElementById('monthlyCost').textContent = data.monthly_cost_est.toFixed(2);
      
      // Update power graph if on monitoring tab
      if (window.powerChart) {
        updatePowerGraph(data.power);
      }
      
      // Update history data if available
      if (data.historical_data_available) {
        updateHistoricalData(data);
      }
    })
    .catch(error => {
      console.error('Fetch error:', error);
    });
}

function updateHistoricalData(data) {
  // Update total statistics
  if (document.getElementById('totalEnergy')) {
    document.getElementById('totalEnergy').textContent = data.overall_total_energy.toFixed(2);
    document.getElementById('totalCost').textContent = data.overall_total_cost.toFixed(2);
    document.getElementById('monitoringSince').textContent = data.monitoring_start_date;
  }
  
  // Update monthly history table
  if (document.getElementById('monthlyHistory')) {
    updateMonthlyHistoryTable(data.historical_months, data.current_month);
  }
}

function updateMonthlyHistoryTable(historicalMonths, currentMonth) {
  const monthlyHistoryElement = document.getElementById('monthlyHistory');
  if (!monthlyHistoryElement) return;
  
  let tableContent = '';
  const costUnit = '<?=$esphomepm_costs_unit?>';
  
  // Add current month if available
  if (currentMonth && currentMonth.month_year) {
    const monthName = getMonthNameFromYearMonth(currentMonth.month_year);
    const energy = parseFloat(currentMonth.total_energy_kwh_completed_days || 0).toFixed(2);
    const cost = parseFloat(currentMonth.total_cost_completed_days || 0).toFixed(2);
    
    tableContent += `<tr>
      <td>${monthName}</td>
      <td>${energy}</td>
      <td>${cost} ${costUnit}</td>
    </tr>`;
  }
  
  // Add historical months
  if (historicalMonths && typeof historicalMonths === 'object') {
    const sortedMonths = Object.keys(historicalMonths).sort().reverse();
    
    for (const monthYear of sortedMonths) {
      const monthData = historicalMonths[monthYear];
      if (monthData) {
        const monthName = getMonthNameFromYearMonth(monthYear);
        const energy = parseFloat(monthData.energy_kwh || 0).toFixed(2);
        const cost = parseFloat(monthData.cost || 0).toFixed(2);
        
        tableContent += `<tr>
          <td>${monthName}</td>
          <td>${energy}</td>
          <td>${cost} ${costUnit}</td>
        </tr>`;
      }
    }
  }
  
  // If no data, show message
  if (tableContent === '') {
    tableContent = '<tr><td colspan="3">No historical data available</td></tr>';
  }
  
  monthlyHistoryElement.innerHTML = tableContent;
}

function getMonthNameFromYearMonth(yearMonth) {
  if (!yearMonth) return 'Unknown';
  
  const months = ['January', 'February', 'March', 'April', 'May', 'June', 
                 'July', 'August', 'September', 'October', 'November', 'December'];
  
  const parts = yearMonth.split('-');
  if (parts.length !== 2) return yearMonth;
  
  const year = parts[0];
  const month = parseInt(parts[1], 10);
  
  if (isNaN(month) || month < 1 || month > 12) return yearMonth;
  
  return `${months[month-1]} ${year}`;
}

// Initialize power graph
function initPowerGraph() {
  if (!document.getElementById('powerGraph')) return;
  
  const ctx = document.getElementById('powerGraph').getContext('2d');
  window.powerChart = new Chart(ctx, {
    type: 'line',
    data: {
      labels: Array(30).fill('').map((_, i) => `-${29-i}s`),
      datasets: [{
        label: 'Power (W)',
        data: Array(30).fill(null),
        borderColor: '#F57C00',
        backgroundColor: 'rgba(245, 124, 0, 0.1)',
        borderWidth: 2,
        tension: 0.3,
        fill: true
      }]
    },
    options: {
      responsive: true,
      maintainAspectRatio: false,
      scales: {
        y: {
          beginAtZero: true,
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          }
        },
        x: {
          grid: {
            color: 'rgba(255, 255, 255, 0.1)'
          }
        }
      },
      animation: {
        duration: 500
      },
      plugins: {
        legend: {
          display: false
        }
      }
    }
  });
}

// Update power graph with new data
function updatePowerGraph(power) {
  if (!window.powerChart) return;
  
  const data = window.powerChart.data.datasets[0].data;
  data.push(power);
  if (data.length > 30) data.shift();
  
  window.powerChart.update();
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
  const tab = '<?=$tab?>';
  if (tab === 'monitoring') {
    initPowerGraph();
  }
  
  if (tab === 'monitoring' || tab === 'history') {
    updateDeviceStatus();
    setInterval(updateDeviceStatus, 10000);
  }
});
</script>
