Menu="Utilities"
Icon="esphomepm.png"
Title="ESPHome Power Monitor"
---
<?php
$esphomepm_cfg = parse_plugin_cfg("esphomepm",true);
$esphomepm_device_ip = isset($esphomepm_cfg['DEVICE_IP']) ? $esphomepm_cfg['DEVICE_IP'] : "";
$esphomepm_device_name = isset($esphomepm_cfg['DEVICE_NAME']) ? $esphomepm_cfg['DEVICE_NAME'] : "Unraid Server PM";
$esphomepm_uirefresh = isset($esphomepm_cfg['UIREFRESH']) ? $esphomepm_cfg['UIREFRESH'] : "1000";
$esphomepm_costs_price = isset($esphomepm_cfg['COSTS_PRICE']) ? $esphomepm_cfg['COSTS_PRICE'] : "0.27";
$esphomepm_costs_unit = isset($esphomepm_cfg['COSTS_UNIT']) ? $esphomepm_cfg['COSTS_UNIT'] : "GBP";
?>

<form markdown="1" method="POST" action="/update.php" target="progressFrame" id="esphomepmSettingsForm">
<input type="hidden" name="#file" value="esphomepm/esphomepm.cfg" />

Device Name:
: <input id="DEVICE_NAME" type="text" class="stopped" name="DEVICE_NAME" maxlength="50" value="<?=$esphomepm_device_name;?>" title="" placeholder="ESPHome Device Name" >  

Device IP:
: <input id="DEVICE_IP" type="text" class="stopped" name="DEVICE_IP" maxlength="15" value="<?=$esphomepm_device_ip;?>" title="" placeholder="192.168.1.x" >  


UI Refresh rate (Milliseconds):
: <input type="text" id="UIREFRESH" name="UIREFRESH" class="narrow" maxlength="50" value="<?=$esphomepm_uirefresh;?>" placeholder="1000">

Price per kWh for cost calculation:
: <input id="COSTS_PRICE" type="text" class="stopped" name="COSTS_PRICE" maxlength="10" value="<?=$esphomepm_costs_price;?>" title="" placeholder="0.00" >  

Unit for cost calculation:
: <input id="COSTS_UNIT" type="text" class="stopped" name="COSTS_UNIT" maxlength="10" value="<?=$esphomepm_costs_unit;?>" title="" placeholder="" >  

 <input id="DEFAULT" class="stopped" type="button" value="Default" onClick="resetDATA(this.form)">
: <input id="btnApply" type="button" value="Apply"><input type="button" value="Done" onClick="done()">
</form>

<!-- Add a feedback area -->
<div id="applyFeedback" style="margin-top: 10px; font-weight: bold;"></div>

<style>
    .value-display {
        transition: all 0.3s ease;
    }
    .value-updated {
        filter: brightness(1.5); /* Simple brightness increase that works with any theme */
    }
</style>

<div id="deviceStatus" style="margin-top: 20px; padding: 10px; border: 1px solid #ccc; display: none;">
    <h3>Power Monitoring</h3>
    <div id="sensorValues">
        <h4>Current Readings</h4>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
            <div>
                <p>Current Power: <span id="currentPower" class="value-display">--</span> W</p>
                <p>Daily Energy: <span id="dailyEnergy" class="value-display">--</span> kWh</p>
            </div>
            <div>
                <p>Daily Cost: <span id="dailyCost" class="value-display">--</span> <span id="costUnitDisplay">--</span></p>
                <p>Monthly Cost (Est.): <span id="monthlyCost" class="value-display">--</span> <span id="costUnitDisplayMonthly">--</span></p>
                <!-- Monitoring Since REMOVED -->
            </div>
        </div>
        
        <h4 style="margin-top: 20px;">Power Usage Graph (Last 60s)</h4>
        <div id="powerGraphContainer" style="margin-top: 10px; height: 250px;">
            <canvas id="powerGraph"></canvas>
        </div>
        
        <!-- monthlyCosts div and its content REMOVED -->
    </div>
</div>

<!-- Include Chart.js from CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>

<script type="text/javascript">
// Global variables
let powerChart = null;
let refreshInterval = null;
let graphRefreshInterval = null;
const graphDataPoints = 60; // Display last 60 seconds of data
const powerHistory = [];
const timeHistory = [];

// Utility to update and flash UI elements
function updateValue(elementId, value, unit = '', flash = true) {
    const element = document.getElementById(elementId);
    if (element) {
        const displayValue = (value === null || value === undefined || isNaN(parseFloat(value))) ? '--' : value;
        element.textContent = `${displayValue}${unit ? ' ' + unit : ''}`;
        if (flash && displayValue !== '--') {
            element.classList.add('value-updated');
            setTimeout(() => element.classList.remove('value-updated'), 300);
        }
    }
}

function resetDATA(form) {
    form.DEVICE_IP.value = "";
    form.DEVICE_NAME.value = "Unraid Server PM"; // Default name
    form.UIREFRESH.value = "1000";
    form.COSTS_PRICE.value = "0.27";
    form.COSTS_UNIT.value = "GBP";
}

function done() {
    window.location.href = '/Main';
}

document.addEventListener('DOMContentLoaded', function() {
    const applyButton = document.getElementById('btnApply');
    const settingsForm = document.getElementById('esphomepmSettingsForm');
    const feedbackElement = document.getElementById('applyFeedback');

    if (applyButton) {
        applyButton.addEventListener('click', function(event) {
            event.preventDefault(); 
            feedbackElement.textContent = 'Saving settings...';
            feedbackElement.style.color = 'orange';
            
            if (settingsForm) {
                settingsForm.submit(); 
            }
            // Feedback for form submission is tricky with iframe target, this is a generic message.
            setTimeout(() => {
                feedbackElement.textContent = 'Settings submitted. Refresh if IP or refresh rate changed.';
                feedbackElement.style.color = 'green';
                setupRefreshIntervals(); // Re-initialize intervals with new settings
                updateDeviceStatus(); // Fetch new data immediately
            }, 1500); 
        });
    }

    initializePowerGraph();
    setupRefreshIntervals();
});

function setupRefreshIntervals() {
    if (refreshInterval) clearInterval(refreshInterval);
    if (graphRefreshInterval) clearInterval(graphRefreshInterval);

    const uiRefreshRate = parseInt(document.getElementById('UIREFRESH').value, 10) || 1000;
    
    updateDeviceStatus(); 
    refreshInterval = setInterval(updateDeviceStatus, Math.max(uiRefreshRate, 1000));

    fetchGraphDataPoint(); 
    graphRefreshInterval = setInterval(fetchGraphDataPoint, 1000); // Graph updates every 1 second
}

async function updateDeviceStatus() {
    const deviceIP = document.getElementById('DEVICE_IP').value;
    const deviceStatusDiv = document.getElementById('deviceStatus');

    if (!deviceIP) {
        deviceStatusDiv.style.display = 'none';
        return;
    }
    deviceStatusDiv.style.display = 'block';

    try {
        const timestamp = new Date().getTime();
        const response = await fetch(`/plugins/esphomepm/status.php?t=${timestamp}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();

        if (data.error) {
            console.error('Error from status.php:', data.error);
            updateValue('dailyEnergy', data.error, '', false);
            updateValue('currentPower', 'Error', '', false);
            return;
        }
        
        updateValue('currentPower', parseFloat(data.power).toFixed(2), '');
        updateValue('dailyEnergy', parseFloat(data.today_energy).toFixed(3), '');
        
        const costUnit = data.costs_unit || '';
        document.getElementById('costUnitDisplay').textContent = costUnit;
        document.getElementById('costUnitDisplayMonthly').textContent = costUnit;

        updateValue('dailyCost', parseFloat(data.daily_cost).toFixed(2));
        updateValue('monthlyCost', parseFloat(data.monthly_cost_est).toFixed(2));

    } catch (error) {
        console.error('Failed to fetch device status:', error);
        updateValue('currentPower', 'Error', '', false);
        updateValue('dailyEnergy', 'Connection Error', '', false);
    }
}

async function fetchGraphDataPoint() {
    const deviceIP = document.getElementById('DEVICE_IP').value;
    if (!deviceIP) return;

    try {
        const timestamp = new Date().getTime();
        const response = await fetch(`/plugins/esphomepm/status.php?graph_point=true&t=${timestamp}`);
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        
        const data = await response.json();
        if (data && typeof data.power !== 'undefined' && data.power !== null && !isNaN(parseFloat(data.power))) {
            updatePowerGraph(parseFloat(data.power));
        } else if (data.error) {
            console.warn("Graph data point error:", data.error); // Log error but don't break graph
        }
    } catch (error) {
        console.error('Failed to fetch graph data point:', error);
    }
}

function initializePowerGraph() {
    const ctx = document.getElementById('powerGraph').getContext('2d');
    if (powerChart) {
        powerChart.destroy();
    }
    powerChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: [], 
            datasets: [{
                label: 'Current Power (W)',
                data: [],  
                borderColor: '#68B36F', 
                backgroundColor: 'rgba(104, 179, 111, 0.2)', 
                borderWidth: 1,
                tension: 0.4, 
                pointRadius: 0, 
                pointHitRadius: 10
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            animation: false, // Disable all animations for performance
            scales: {
                x: {
                    type: 'category',
                    ticks: {
                        autoSkip: true,
                        maxTicksLimit: 10, 
                        maxRotation: 0,
                        minRotation: 0
                    }
                },
                y: {
                    beginAtZero: true,
                    suggestedMax: 50 
                }
            },
            plugins: {
                legend: { display: false },
                tooltip: {
                    enabled: true,
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';
                            if (label) {
                                label += ': ';
                            }
                            if (context.parsed.y !== null) {
                                label += parseFloat(context.parsed.y).toFixed(2) + ' W';
                            }
                            return label;
                        }
                    }
                }
            }
        }
    });
    // Pre-fill labels for 60 points to avoid layout shifts
    for (let i = 0; i < graphDataPoints; i++) {
        timeHistory.push('');
        powerHistory.push(null); // Use null for gaps in Chart.js
    }
    powerChart.data.labels = [...timeHistory];
    powerChart.data.datasets[0].data = [...powerHistory];
    powerChart.update('none');
}

function updatePowerGraph(power) {
    if (!powerChart) return;

    const now = new Date();
    const timeLabel = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit', second: '2-digit' });

    powerHistory.push(power);
    timeHistory.push(timeLabel);

    if (powerHistory.length > graphDataPoints) {
        powerHistory.shift();
        timeHistory.shift();
    }

    powerChart.data.labels = [...timeHistory];
    powerChart.data.datasets[0].data = [...powerHistory];
    
    const maxPower = Math.max(...powerHistory.filter(p => p !== null), 0);
    if (maxPower > 0) {
        powerChart.options.scales.y.suggestedMax = Math.ceil(maxPower / 10) * 10 + 20; 
    } else {
        powerChart.options.scales.y.suggestedMax = 50; 
    }

    powerChart.update('none'); 
}

</script>
