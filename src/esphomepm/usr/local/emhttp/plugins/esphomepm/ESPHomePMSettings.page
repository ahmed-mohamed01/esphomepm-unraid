Menu="Utilities"
Icon="esphomepm.png"
Title="ESPHome Power Monitor"
---
<?php
$esphomepm_cfg = parse_plugin_cfg("esphomepm",true);
$esphomepm_device_ip = isset($esphomepm_cfg['DEVICE_IP']) ? $esphomepm_cfg['DEVICE_IP'] : "";
$esphomepm_device_name = isset($esphomepm_cfg['DEVICE_NAME']) ? $esphomepm_cfg['DEVICE_NAME'] : "Unraid Server PM";
$esphomepm_uirefresh = isset($esphomepm_cfg['UIREFRESH']) ? $esphomepm_cfg['UIREFRESH'] : "1000";
$esphomepm_costs_price = isset($esphomepm_cfg['COSTS_PRICE']) ? $esphomepm_cfg['COSTS_PRICE'] : "0.27";
$esphomepm_costs_unit = isset($esphomepm_cfg['COSTS_UNIT']) ? $esphomepm_cfg['COSTS_UNIT'] : "GBP";
?>

<form markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="esphomepm/esphomepm.cfg" />

Device Name:
: <input id="DEVICE_NAME" type="text" class="stopped" name="DEVICE_NAME" maxlength="50" value="<?=$esphomepm_device_name;?>" title="" placeholder="ESPHome Device Name" >  

Device IP:
: <input id="DEVICE_IP" type="text" class="stopped" name="DEVICE_IP" maxlength="15" value="<?=$esphomepm_device_ip;?>" title="" placeholder="192.168.1.x" >  


UI Refresh rate (Milliseconds):
: <input type="text" id="UIREFRESH" name="UIREFRESH" class="narrow" maxlength="50" value="<?=$esphomepm_uirefresh;?>" placeholder="1000">

Price per kWh for cost calculation:
: <input id="COSTS_PRICE" type="text" class="stopped" name="COSTS_PRICE" maxlength="10" value="<?=$esphomepm_costs_price;?>" title="" placeholder="0.00" >  

Unit for cost calculation:
: <input id="COSTS_UNIT" type="text" class="stopped" name="COSTS_UNIT" maxlength="10" value="<?=$esphomepm_costs_unit;?>" title="" placeholder="" >  

 <input id="DEFAULT" class="stopped" type="submit" value="Default" onClick="resetDATA(this.form)">
: <input id="btnApply" type="submit" value="Apply" onClick="applySettings(this.form)"><input type="button" value="Done" onClick="done()">
</form>

<style>
    .value-display {
        transition: color 0.3s ease;
    }
    .value-updated {
        color: #4CAF50;
    }
</style>

<div id="deviceStatus" style="margin-top: 20px; padding: 10px; border: 1px solid #ccc; display: none;">
    <h3>Power Monitoring</h3>
    <div id="sensorValues">
        <h4>Current Readings</h4>
        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 10px;">
            <div>
                <p>Current Power: <span id="currentPower" class="value-display">--</span> W</p>
                <p>Daily Energy: <span id="dailyEnergy" class="value-display">--</span> kWh</p>
                <p>Voltage: <span id="voltage" class="value-display">--</span> V</p>
                <p>Current: <span id="current" class="value-display">--</span> A</p>
            </div>
            <div>
                <p>Daily Cost: <span id="dailyCost" class="value-display">--</span> <span id="costUnit">--</span></p>
                <p>Monthly Cost (Est.): <span id="monthlyCost" class="value-display">--</span> <span id="costUnitMonthly">--</span></p>
                <p>Monitoring Since: <span id="monitoringSince">--</span></p>
            </div>
        </div>
        
        <h4 style="margin-top: 20px;">Monthly Costs</h4>
        <div id="monthlyCostsContainer" style="margin-top: 10px;">
            <table id="monthlyCostsTable" class="tablesorter" style="width: 100%;">
                <thead>
                    <tr>
                        <th>Month</th>
                        <th>Energy (kWh)</th>
                        <th>Cost</th>
                    </tr>
                </thead>
                <tbody id="monthlyCostsBody">
                    <!-- Monthly cost data will be inserted here -->
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="2"><strong>Total since <span id="totalSinceDate">--</span>:</strong></td>
                        <td><strong><span id="totalCost">--</span> <span id="totalCostUnit">--</span></strong></td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>
</div>

<script type="text/javascript">
function resetDATA(form) {
	form.DEVICE_IP.value = "";
  form.DEVICE_NAME.value = "";
  form.UIREFRESH.value = 1000;
  form.COSTS_PRICE.value = 0.27;
  form.COSTS_UNIT.value = "GBP";
}

function done() {
    window.location.href = '/Main';
}

// Function to load monthly cost data from server
async function loadMonthlyCostData() {
    try {
        const timestamp = new Date().getTime();
        const response = await fetch(`/plugins/esphomepm/monthly_data.php?t=${timestamp}`);
        if (!response.ok) {
            throw new Error(`Failed to load monthly data: ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error('Error loading monthly data:', error);
        // Return empty data structure if loading fails
        const now = new Date();
        const currentMonth = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}`;
        const startDate = now.toISOString().split('T')[0];
        
        const initialData = {
            startDate: startDate,
            months: {}
        };
        initialData.months[currentMonth] = { energy: 0, cost: 0 };
        
        return initialData;
    }
}

// Function to update monthly cost data with today's reading
async function updateMonthlyCostData(dailyEnergy, costPrice) {
    try {
        // Send the update to the server
        const response = await fetch('/plugins/esphomepm/monthly_data.php', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                dailyEnergy: dailyEnergy,
                costPrice: costPrice
            })
        });
        
        if (!response.ok) {
            throw new Error(`Failed to update monthly data: ${response.status}`);
        }
        
        const result = await response.json();
        if (result.error) {
            throw new Error(result.error);
        }
        
        return result.data;
    } catch (error) {
        console.error('Error updating monthly data:', error);
        // If update fails, just return the current data
        return await loadMonthlyCostData();
    }
}

// Function to display monthly cost data in the table
function displayMonthlyCostData(data, costUnit) {
    const tableBody = document.getElementById('monthlyCostsBody');
    tableBody.innerHTML = '';
    
    // Sort months in descending order
    const sortedMonths = Object.keys(data.months).sort().reverse();
    
    let totalCost = 0;
    let totalEnergy = 0;
    
    sortedMonths.forEach(month => {
        const monthData = data.months[month];
        const row = document.createElement('tr');
        
        // Format month for display (YYYY-MM to Month YYYY)
        const [year, monthNum] = month.split('-');
        const monthDate = new Date(year, parseInt(monthNum) - 1, 1);
        const monthName = monthDate.toLocaleString('default', { month: 'long' });
        const displayMonth = `${monthName} ${year}`;
        
        row.innerHTML = `
            <td>${displayMonth}</td>
            <td>${monthData.energy.toFixed(2)}</td>
            <td>${monthData.cost.toFixed(2)} ${costUnit}</td>
        `;
        
        tableBody.appendChild(row);
        
        totalCost += monthData.cost;
        totalEnergy += monthData.energy;
    });
    
    // Update the total
    document.getElementById('totalCost').textContent = totalCost.toFixed(2);
    document.getElementById('totalCostUnit').textContent = costUnit;
    
    // Format the start date
    const startDate = new Date(data.startDate);
    const startMonth = startDate.toLocaleString('default', { month: 'long' });
    document.getElementById('totalSinceDate').textContent = `${startMonth} ${startDate.getFullYear()}`;
    document.getElementById('monitoringSince').textContent = startDate.toLocaleDateString();
    
    return { totalCost, totalEnergy };
}

// Function to update power monitoring data
async function updateDeviceStatus() {
    const deviceIP = document.getElementById('DEVICE_IP').value;
    if (!deviceIP) {
        document.getElementById('deviceStatus').style.display = 'none';
        return;
    }
    
    document.getElementById('deviceStatus').style.display = 'block';
    
    try {
        // Add timestamp to prevent caching
        const timestamp = new Date().getTime();
        
        // Use our PHP proxy to get the data
        const response = await fetch(`/plugins/esphomepm/status.php?t=${timestamp}`);
        if (!response.ok) {
            throw new Error(`Network response was not ok: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('Power data received:', data);
        
        // Check if there's an error message
        if (data.error) {
            console.error('Error in data:', data.error);
            return;
        }
        
        // Get cost price and unit
        const costPrice = parseFloat(data.Costs_Price) || 0.27;
        const costUnit = data.Costs_Unit || 'GBP';
        
        // Function to update a value with smooth transition
        function updateValueWithTransition(elementId, newValue, decimals = 2) {
            const element = document.getElementById(elementId);
            const formattedValue = Number(newValue).toFixed(decimals);
            
            // Only apply transition if value has changed
            if (element.textContent !== formattedValue) {
                element.textContent = formattedValue;
                element.classList.add('value-updated');
                
                // Remove the highlight class after transition completes
                setTimeout(() => {
                    element.classList.remove('value-updated');
                }, 500);
            }
        }
        
        // Update all values with smooth transitions
        updateValueWithTransition('currentPower', data.Power);
        updateValueWithTransition('dailyEnergy', data.Total);
        updateValueWithTransition('voltage', data.Voltage);
        updateValueWithTransition('current', data.Current);
        
        // Calculate and display costs
        const dailyEnergy = Number(data.Total);
        const dailyCost = dailyEnergy * costPrice;
        const monthlyCost = dailyCost * 30; // Estimate based on 30 days
        
        updateValueWithTransition('dailyCost', dailyCost);
        updateValueWithTransition('monthlyCost', monthlyCost);
        
        // Update units
        document.getElementById('costUnit').textContent = costUnit;
        document.getElementById('costUnitMonthly').textContent = costUnit;
        document.getElementById('totalCostUnit').textContent = costUnit;
        
        // Update monthly data on the server
        const monthlyData = await updateMonthlyCostData(dailyEnergy, costPrice);
        displayMonthlyCostData(monthlyData, costUnit);
    } catch (error) {
        console.error('Error fetching power data:', error);
    }
}

// Global variable for refresh interval
let refreshInterval;

// Function to set up the refresh interval
function setupRefreshInterval() {
    // Clear any existing interval
    if (refreshInterval) {
        clearInterval(refreshInterval);
        refreshInterval = null;
    }
    
    // Get the refresh rate from the input field
    const refreshRate = parseInt(document.getElementById('UIREFRESH').value) || 1000;
    console.log('Setting refresh rate to', refreshRate, 'ms');
    
    // Set up new interval if refresh rate is positive
    if (refreshRate > 0) {
        // Immediate update
        updateDeviceStatus();
        
        // Set interval for future updates
        refreshInterval = setInterval(updateDeviceStatus, refreshRate);
    }
}

// Function to apply settings without page reload
function applySettings(form) {
    // Prevent the default form submission which would reload the page
    event.preventDefault();
    
    // Get the form data
    const formData = new FormData(form);
    
    // Send the form data to the server
    fetch('/update.php', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Failed to save settings');
        }
        return response.text();
    })
    .then(() => {
        // Update the refresh interval immediately
        setupRefreshInterval();
        
        // Show a success message
        alert('Settings applied successfully!');
    })
    .catch(error => {
        console.error('Error applying settings:', error);
        alert('Failed to apply settings: ' + error.message);
    });
    
    return false;
}

// Update power data when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Initial setup of refresh interval
    setupRefreshInterval();
    
    // Update interval when refresh rate changes directly
    document.getElementById('UIREFRESH').addEventListener('input', function() {
        // Only update if the field is not empty
        if (this.value.trim() !== '') {
            setupRefreshInterval();
        }
    });
});

// Update power data when IP changes
document.getElementById('DEVICE_IP').addEventListener('change', updateDeviceStatus);
</script>
