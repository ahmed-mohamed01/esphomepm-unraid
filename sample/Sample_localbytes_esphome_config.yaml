substitutions:
  # Device Names
  name: "localbytes-plug-pm2"
  friendly_name: "Localbytes Plug PM2"
  main_icon: "power-socket-uk"

  # Default Relay State
  default_state: "RESTORE_DEFAULT_OFF"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  on_boot:
    then:
      - lambda: |
          if (id(voltage_multiply) <= 0) id(voltage_multiply) = 0.3;
          if (id(power_multiply) <= 0) id(power_multiply) = 0.133;
          if (id(current_multiply) <= 0) id(current_multiply) = 0.85;
          
          // Set initial start date if this is first boot after adding feature
          if (id(total_start_timestamp) <= 0) {
            auto time = id(homeassistant_time).now();
            id(total_start_timestamp) = time.timestamp;
          }
          
          // Check if we need to reset monthly data (new month)
          auto time = id(homeassistant_time).now();
          int current_month = time.month;
          int current_year = time.year;
          
          if (id(last_month) != current_month || id(last_year) != current_year) {
            id(monthly_energy_consumption) = 0.0;
            id(last_month) = current_month;
            id(last_year) = current_year;
            id(monthly_start_timestamp) = time.timestamp;
          }

  name_add_mac_suffix: true

  project:
    name: localbytes.plug-pm
    version: "1.3.0"

esp8266:
  board: esp01_1m
  restore_from_flash: true
  early_pin_init: false

logger:

dashboard_import:
  package_import_url: github://LocalBytes/esphome-localbytes-plug/localbytes-plug-pm.yaml@main

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid_iot
  password: !secret wifi_password_iot_vlan
  use_address: 192.168.10.181
  power_save_mode: high

  ap:
    ssid: "${friendly_name}-backup-SSID"
    password: !secret wifi_password_iot_vlan

captive_portal:

web_server:
  port: 80

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/London

api:
  encryption:
    key: !secret api_key

globals:
  # Energy tracking globals
  - id: total_energy_consumption
    type: float
    restore_value: true
    initial_value: "0.0"
    
  - id: monthly_energy_consumption
    type: float
    restore_value: true
    initial_value: "0.0"
    
  - id: last_month
    type: int
    restore_value: true
    initial_value: "0"
    
  - id: last_year
    type: int
    restore_value: true
    initial_value: "0"
    
  # Timestamp tracking when total energy started
  - id: total_start_timestamp
    type: int
    restore_value: true
    initial_value: "0"
    
  # Timestamp tracking when monthly energy started
  - id: monthly_start_timestamp
    type: int
    restore_value: true
    initial_value: "0"

binary_sensor:
  # Push Button (Toggles Relay When Pressed)
  - platform: gpio
    pin:
      number: GPIO3
      mode: INPUT_PULLUP
      inverted: true
    name: "Button"
    on_click:
      - max_length: 1s
        then:
          if:
            condition:
              switch.is_off: disable_button
            then:
              switch.toggle: relay

      - min_length: 1.5s
        max_length: 5s
        then:
          switch.toggle: disable_led

      - min_length: 8s
        max_length: 12s
        then:
          switch.toggle: disable_button

  - platform: status
    name: "Server Status"

switch:
  # Relay (As Switch)
  - platform: gpio
    name: ""
    icon: "mdi:${main_icon}"
    pin: GPIO14
    id: relay
    restore_mode: "${default_state}"
    on_turn_on:
      if:
        condition:
          switch.is_off: disable_led
        then:
          light.turn_on:
            id: led
    on_turn_off:
      - light.turn_off:
          id: led

  - platform: template
    name: "Disable LED"
    id: disable_led
    icon: "mdi:led-variant-off"
    restore_mode: "${default_state}"
    optimistic: true
    on_turn_on:
      - light.turn_off: led
    on_turn_off:
      - if:
          condition:
            switch.is_on: relay
          then:
            light.turn_on: led

  - platform: template
    name: "Disable Button"
    id: disable_button
    icon: "mdi:toggle-switch-off-outline"
    restore_mode: "${default_state}"
    optimistic: true

sensor:
  # Power Monitoring
  - platform: hlw8012
    id: power_monitor
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO4
    cf1_pin: GPIO5
    update_interval: 10s
    
    voltage:
      name: "Voltage"
      id: voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        - lambda: return x * id(voltage_multiply);
        
    power:
      name: "Power"
      id: power
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        - lambda: return x * id(power_multiply);
        
    current:
      name: "Current"
      id: current
      unit_of_measurement: A
      accuracy_decimals: 3
      filters:
        - lambda: return x * id(current_multiply);
          
  # Total daily energy sensor
  - platform: total_daily_energy
    name: "Daily Energy"
    device_class: energy
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh
    on_value:
      then:
        - lambda: |-
            // Update both total and monthly energy
            id(total_energy_consumption) += x;
            id(monthly_energy_consumption) += x;
  
  # Monthly energy sensor
  - platform: template
    name: "Monthly Energy"
    id: monthly_energy
    device_class: energy
    state_class: "total_increasing" 
    unit_of_measurement: kWh
    accuracy_decimals: 3
    lambda: |-
      return id(monthly_energy_consumption);
    update_interval: 60s
    
  # Total energy sensor
  - platform: template
    name: "Total Energy"
    id: total_energy
    device_class: energy
    state_class: "total_increasing" 
    unit_of_measurement: kWh
    accuracy_decimals: 3
    lambda: |-
      return id(total_energy_consumption);
    update_interval: 60s
    
  # Total energy tracking start date
  - platform: template
    name: "Total Energy Since"
    id: total_energy_since
    icon: "mdi:calendar-start"
    update_interval: 60s
    lambda: |-
      time_t timestamp = id(total_start_timestamp);
      char date_str[30];
      struct tm *timeinfo = localtime(&timestamp);
      strftime(date_str, sizeof(date_str), "%d %b %Y", timeinfo);
      return std::string(date_str);
      
  # Monthly energy tracking start date
  - platform: template
    name: "Monthly Energy Since"
    id: monthly_energy_since
    icon: "mdi:calendar-start"
    update_interval: 60s
    lambda: |-
      time_t timestamp = id(monthly_start_timestamp);
      char date_str[30];
      struct tm *timeinfo = localtime(&timestamp);
      strftime(date_str, sizeof(date_str), "%d %b %Y", timeinfo);
      return std::string(date_str);


# Relay State LED
output:
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO13
      inverted: true

light:
  - platform: binary
    output: state_led
    id: led

button:
  - platform: restart
    name: "Restart"
    
  - platform: factory_reset
    name: "Restart with Factory Default Settings"
    
  # Reset Monthly Energy Button
  - platform: template
    name: "Reset Monthly Energy"
    icon: "mdi:refresh"
    on_press:
      then:
        - lambda: |-
            id(monthly_energy_consumption) = 0.0;
            auto time = id(homeassistant_time).now();
            id(monthly_start_timestamp) = time.timestamp;
            id(last_month) = time.month;
            id(last_year) = time.year;
        - logger.log: "Monthly energy consumption reset to 0"
        
  # Reset Total Energy Button
  - platform: template
    name: "Reset Total Energy"
    icon: "mdi:counter"
    on_press:
      then:
        - lambda: |-
            id(total_energy_consumption) = 0.0;
            auto time = id(homeassistant_time).now();
            id(total_start_timestamp) = time.timestamp;
        - logger.log: "Total energy consumption reset to 0"